
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000063e  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001b5  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007b7  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c9  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000050c  00000000  00000000  000011b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000443  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000041a  00000000  00000000  00001c33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ec       	ldi	r30, 0xCA	; 202
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	b5 c2       	rjmp	.+1386   	; 0x5c6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:

#include "avr-drv.h"

int main(void)
{
	usartSetBaudRate(USART_Port_0, 115200L);
  5e:	60 e0       	ldi	r22, 0x00	; 0
  60:	72 ec       	ldi	r23, 0xC2	; 194
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	47 d2       	rcall	.+1166   	; 0x4f6 <usartSingleSetBaudRate>
	usartSetNumBit(USART_Port_0, USART_NumBits_8);
  68:	83 e0       	ldi	r24, 0x03	; 3
  6a:	07 d0       	rcall	.+14     	; 0x7a <usartSingleSetNumBit>
	usartSetParity(USART_Port_0, USART_Parity_None);
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	30 d0       	rcall	.+96     	; 0xd0 <usartSingleSetParity>
	usartSetStopBit(USART_Port_0, USART_StopBit_1);
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	4d d0       	rcall	.+154    	; 0x10e <usartSingleSetStopBit>
	usartSetMode(USART_Port_0, USART_Mode_Async);
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	63 d0       	rcall	.+198    	; 0x13e <usartSingleSetMode>
  78:	ff cf       	rjmp	.-2      	; 0x78 <main+0x1a>

0000007a <usartSingleSetNumBit>:
	return result;
}

int usartSingleSetNumBit(USART_NumBits_t numBit) {
	uint8_t ubBit;
	switch (numBit) {
  7a:	82 30       	cpi	r24, 0x02	; 2
  7c:	71 f0       	breq	.+28     	; 0x9a <usartSingleSetNumBit+0x20>
  7e:	83 30       	cpi	r24, 0x03	; 3
  80:	28 f4       	brcc	.+10     	; 0x8c <usartSingleSetNumBit+0x12>
  82:	88 23       	and	r24, r24
  84:	c9 f0       	breq	.+50     	; 0xb8 <usartSingleSetNumBit+0x3e>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	71 f4       	brne	.+28     	; 0xa6 <usartSingleSetNumBit+0x2c>
  8a:	05 c0       	rjmp	.+10     	; 0x96 <usartSingleSetNumBit+0x1c>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	39 f0       	breq	.+14     	; 0x9e <usartSingleSetNumBit+0x24>
  90:	84 30       	cpi	r24, 0x04	; 4
  92:	49 f4       	brne	.+18     	; 0xa6 <usartSingleSetNumBit+0x2c>
  94:	06 c0       	rjmp	.+12     	; 0xa2 <usartSingleSetNumBit+0x28>
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	10 c0       	rjmp	.+32     	; 0xba <usartSingleSetNumBit+0x40>
  9a:	92 e0       	ldi	r25, 0x02	; 2
  9c:	0e c0       	rjmp	.+28     	; 0xba <usartSingleSetNumBit+0x40>
	case USART_NumBits_6:
		ubBit = 0x01;
		break;
	case USART_NumBits_7:
		ubBit = 0x02;
		break;
  9e:	93 e0       	ldi	r25, 0x03	; 3
  a0:	0c c0       	rjmp	.+24     	; 0xba <usartSingleSetNumBit+0x40>
	case USART_NumBits_8:
		ubBit = 0x03;
		break;
  a2:	97 e0       	ldi	r25, 0x07	; 7
  a4:	0a c0       	rjmp	.+20     	; 0xba <usartSingleSetNumBit+0x40>
	case USART_NumBits_9:
		ubBit = 0x07;
		break;
	default:
		errno = EINVAL;
  a6:	86 e1       	ldi	r24, 0x16	; 22
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	90 93 61 00 	sts	0x0061, r25
  ae:	80 93 60 00 	sts	0x0060, r24
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	3f ef       	ldi	r19, 0xFF	; 255
  b6:	0a c0       	rjmp	.+20     	; 0xcc <usartSingleSetNumBit+0x52>
		return -1;
  b8:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	UCSRC &= ~(_BV(UCSZ0) | _BV(UCSZ1) | _BV(UCSZ1));
  ba:	80 b5       	in	r24, 0x20	; 32
  bc:	89 7f       	andi	r24, 0xF9	; 249
  be:	80 bd       	out	0x20, r24	; 32
	UCSRC |= (ubBit << UCSZ0);
  c0:	80 b5       	in	r24, 0x20	; 32
  c2:	99 0f       	add	r25, r25
  c4:	98 2b       	or	r25, r24
  c6:	90 bd       	out	0x20, r25	; 32
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0

	return 0;
}
  cc:	c9 01       	movw	r24, r18
  ce:	08 95       	ret

000000d0 <usartSingleSetParity>:

int usartSingleSetParity(USART_Parity_t partity) {
	uint8_t ubParity;
	switch (partity) {
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	29 f0       	breq	.+10     	; 0xde <usartSingleSetParity+0xe>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	80 f0       	brcs	.+32     	; 0xf8 <usartSingleSetParity+0x28>
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	29 f4       	brne	.+10     	; 0xe6 <usartSingleSetParity+0x16>
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <usartSingleSetParity+0x12>
  de:	92 e0       	ldi	r25, 0x02	; 2
  e0:	0c c0       	rjmp	.+24     	; 0xfa <usartSingleSetParity+0x2a>
  e2:	93 e0       	ldi	r25, 0x03	; 3
  e4:	0a c0       	rjmp	.+20     	; 0xfa <usartSingleSetParity+0x2a>
		break;
	case USART_Parity_Odd:
		ubParity = 3;
		break;
	default:
		errno = EINVAL;
  e6:	86 e1       	ldi	r24, 0x16	; 22
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 61 00 	sts	0x0061, r25
  ee:	80 93 60 00 	sts	0x0060, r24
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	3f ef       	ldi	r19, 0xFF	; 255
  f6:	09 c0       	rjmp	.+18     	; 0x10a <usartSingleSetParity+0x3a>
		return -1;
  f8:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	UCSRC &= ~(_BV(UPM0) | _BV(UPM1));
  fa:	80 b5       	in	r24, 0x20	; 32
  fc:	8f 7c       	andi	r24, 0xCF	; 207
  fe:	80 bd       	out	0x20, r24	; 32
	UCSRC = (ubParity << UPM0);
 100:	92 95       	swap	r25
 102:	90 7f       	andi	r25, 0xF0	; 240
 104:	90 bd       	out	0x20, r25	; 32
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0

	return 0;
}
 10a:	c9 01       	movw	r24, r18
 10c:	08 95       	ret

0000010e <usartSingleSetStopBit>:

int usartSingleSetStopBit(USART_StopBit_t stopBit) {
	switch (stopBit) {
 10e:	88 23       	and	r24, r24
 110:	19 f0       	breq	.+6      	; 0x118 <usartSingleSetStopBit+0xa>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	51 f4       	brne	.+20     	; 0x12a <usartSingleSetStopBit+0x1c>
 116:	03 c0       	rjmp	.+6      	; 0x11e <usartSingleSetStopBit+0x10>
	case USART_StopBit_1:
		UCSRC &= ~(_BV(USBS));
 118:	80 b5       	in	r24, 0x20	; 32
 11a:	87 7f       	andi	r24, 0xF7	; 247
 11c:	02 c0       	rjmp	.+4      	; 0x122 <usartSingleSetStopBit+0x14>
		break;
	case USART_StopBit_2:
		UCSRC |= _BV(USBS);
 11e:	80 b5       	in	r24, 0x20	; 32
 120:	88 60       	ori	r24, 0x08	; 8
 122:	80 bd       	out	0x20, r24	; 32
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	08 c0       	rjmp	.+16     	; 0x13a <usartSingleSetStopBit+0x2c>
		break;
	default:
		errno = EINVAL;
 12a:	86 e1       	ldi	r24, 0x16	; 22
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 61 00 	sts	0x0061, r25
 132:	80 93 60 00 	sts	0x0060, r24
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	3f ef       	ldi	r19, 0xFF	; 255
		return -1;
		break;
	}

	return 0;
}
 13a:	c9 01       	movw	r24, r18
 13c:	08 95       	ret

0000013e <usartSingleSetMode>:

int usartSingleSetMode(USART_Mode_t mode) {
	switch(mode)
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	49 f0       	breq	.+18     	; 0x154 <usartSingleSetMode+0x16>
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	18 f0       	brcs	.+6      	; 0x14c <usartSingleSetMode+0xe>
 146:	82 30       	cpi	r24, 0x02	; 2
 148:	79 f4       	brne	.+30     	; 0x168 <usartSingleSetMode+0x2a>
 14a:	0a c0       	rjmp	.+20     	; 0x160 <usartSingleSetMode+0x22>
	{
	case USART_Mode_Async:
		UCSRC &= ~(_BV(UMSEL));
 14c:	80 b5       	in	r24, 0x20	; 32
 14e:	8f 7b       	andi	r24, 0xBF	; 191
 150:	80 bd       	out	0x20, r24	; 32
 152:	03 c0       	rjmp	.+6      	; 0x15a <usartSingleSetMode+0x1c>
		break;
	case USART_Mode_SyncMaster:
		UCSRC = _BV(UMSEL);
 154:	80 e4       	ldi	r24, 0x40	; 64
 156:	80 bd       	out	0x20, r24	; 32
		XCK0_DDR |= _BV(XCK0_DDx);
 158:	8c 9a       	sbi	0x11, 4	; 17
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	0c c0       	rjmp	.+24     	; 0x178 <usartSingleSetMode+0x3a>
		break;
	case USART_Mode_SyncSlave:
		UCSRC = _BV(UMSEL);
 160:	80 e4       	ldi	r24, 0x40	; 64
 162:	80 bd       	out	0x20, r24	; 32
		XCK0_DDR &= ~(_BV(XCK0_DDx));
 164:	8c 98       	cbi	0x11, 4	; 17
 166:	f9 cf       	rjmp	.-14     	; 0x15a <usartSingleSetMode+0x1c>
		break;
	default:
		errno = EINVAL;
 168:	86 e1       	ldi	r24, 0x16	; 22
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 61 00 	sts	0x0061, r25
 170:	80 93 60 00 	sts	0x0060, r24
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	3f ef       	ldi	r19, 0xFF	; 255
		return -1;
		break;
	}
	return 0;
}
 178:	c9 01       	movw	r24, r18
 17a:	08 95       	ret

0000017c <usartSingleEnableRx>:

int usartSingleEnableRx(_Bool enable) {
	if (true == enable) {
 17c:	88 23       	and	r24, r24
 17e:	11 f0       	breq	.+4      	; 0x184 <usartSingleEnableRx+0x8>
		UCSRB |= _BV(RXEN);
 180:	54 9a       	sbi	0x0a, 4	; 10
 182:	01 c0       	rjmp	.+2      	; 0x186 <usartSingleEnableRx+0xa>
	} else {
		UCSRB &= ~_BV(RXEN);
 184:	54 98       	cbi	0x0a, 4	; 10
	}

	return 0;
}
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	08 95       	ret

0000018c <usartSingleEnableTx>:

int usartSingleEnableTx(_Bool enable) {
	if (true == enable) {
 18c:	88 23       	and	r24, r24
 18e:	11 f0       	breq	.+4      	; 0x194 <usartSingleEnableTx+0x8>
		UCSRB |= _BV(TXEN);
 190:	53 9a       	sbi	0x0a, 3	; 10
 192:	01 c0       	rjmp	.+2      	; 0x196 <usartSingleEnableTx+0xa>
	} else {
		UCSRB &= ~_BV(TXEN);
 194:	53 98       	cbi	0x0a, 3	; 10
	}

	return 0;
}
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	08 95       	ret

0000019c <usartSinglePutc>:

int usartSinglePutc(char data) {
	if (false != (UCSRB & (1 << TXEN))) {
 19c:	53 9b       	sbis	0x0a, 3	; 10
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <usartSinglePutc+0x10>
		while (!(UCSRA & (1 << UDRE)))
 1a0:	5d 9b       	sbis	0x0b, 5	; 11
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <usartSinglePutc+0x4>
			;
		UDR = data;
 1a4:	8c b9       	out	0x0c, r24	; 12
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	08 c0       	rjmp	.+16     	; 0x1bc <usartSinglePutc+0x20>
		return 0;
	} else {
		errno = ETXDISABLED;
 1ac:	81 e8       	ldi	r24, 0x81	; 129
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 61 00 	sts	0x0061, r25
 1b4:	80 93 60 00 	sts	0x0060, r24
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	3f ef       	ldi	r19, 0xFF	; 255
		return -1;
	}
}
 1bc:	c9 01       	movw	r24, r18
 1be:	08 95       	ret

000001c0 <usartSingleGetc>:

int usartSingleGetc(char* data) {
 1c0:	fc 01       	movw	r30, r24
	int wRetVal = 0;
	uint8_t ubStatus = UCSRB;

	if ((ubStatus & (1 << RXEN)) == 0) {
 1c2:	54 99       	sbic	0x0a, 4	; 10
 1c4:	07 c0       	rjmp	.+14     	; 0x1d4 <usartSingleGetc+0x14>
		errno = ERXDISABLED;
 1c6:	82 e8       	ldi	r24, 0x82	; 130
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 61 00 	sts	0x0061, r25
 1ce:	80 93 60 00 	sts	0x0060, r24
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <usartSingleGetc+0x1a>
		wRetVal = -1;
	} else {
		ubStatus = UCSRA;
 1d4:	9b b1       	in	r25, 0x0b	; 11

		if ((ubStatus & USART_RX_CHAR_IN) != 0) {
 1d6:	97 fd       	sbrc	r25, 7
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <usartSingleGetc+0x20>
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	3f ef       	ldi	r19, 0xFF	; 255
 1de:	1f c0       	rjmp	.+62     	; 0x21e <usartSingleGetc+0x5e>
			if ((ubStatus & USART_RX_ERR_MASK) != 0) {
 1e0:	89 2f       	mov	r24, r25
 1e2:	8c 71       	andi	r24, 0x1C	; 28
 1e4:	19 f4       	brne	.+6      	; 0x1ec <usartSingleGetc+0x2c>
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	17 c0       	rjmp	.+46     	; 0x21a <usartSingleGetc+0x5a>
				switch (ubStatus) {
 1ec:	98 30       	cpi	r25, 0x08	; 8
 1ee:	39 f0       	breq	.+14     	; 0x1fe <usartSingleGetc+0x3e>
 1f0:	90 31       	cpi	r25, 0x10	; 16
 1f2:	41 f0       	breq	.+16     	; 0x204 <usartSingleGetc+0x44>
 1f4:	94 30       	cpi	r25, 0x04	; 4
 1f6:	49 f4       	brne	.+18     	; 0x20a <usartSingleGetc+0x4a>
				case 0x04:
					errno = ERXPARITY;
 1f8:	83 e8       	ldi	r24, 0x83	; 131
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	08 c0       	rjmp	.+16     	; 0x20e <usartSingleGetc+0x4e>
					wRetVal = -1;//USART_ERR_PARITY;
					break;
				case 0x08:
					errno = ERXOVERRUN;
 1fe:	84 e8       	ldi	r24, 0x84	; 132
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	05 c0       	rjmp	.+10     	; 0x20e <usartSingleGetc+0x4e>
					wRetVal = -1;//USART_ERR_OVERRUN;
					break;
				case 0x10:
					errno = ERXFRAM;
 204:	85 e8       	ldi	r24, 0x85	; 133
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <usartSingleGetc+0x4e>
					wRetVal = -1;//USART_ERR_FRAME;
					break;
				default:
					errno = ERXMULTI;
 20a:	86 e8       	ldi	r24, 0x86	; 134
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 61 00 	sts	0x0061, r25
 212:	80 93 60 00 	sts	0x0060, r24
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	3f ef       	ldi	r19, 0xFF	; 255
					wRetVal = -1;//USART_ERR_RX_MULTI;
					break;
				}
			} else {
			}
			*data = UDR;
 21a:	8c b1       	in	r24, 0x0c	; 12
 21c:	80 83       	st	Z, r24
		} else {
			wRetVal = -1;//USART_ERR_RX_EMPTY;
		}
	}
	return wRetVal;
}
 21e:	c9 01       	movw	r24, r18
 220:	08 95       	ret

00000222 <usartSingleIsTx>:

_Bool usartSingleIsTx(void) {
	if ((UCSRA & (1 << UDRE))) {
 222:	8b b1       	in	r24, 0x0b	; 11
 224:	82 95       	swap	r24
 226:	86 95       	lsr	r24
 228:	87 70       	andi	r24, 0x07	; 7
 22a:	80 95       	com	r24
		return false;
	} else {
		return true;
	}
}
 22c:	81 70       	andi	r24, 0x01	; 1
 22e:	08 95       	ret

00000230 <usartSingleEnableRxInt>:

int usartSingleEnableRxInt(_Bool enable) {
	if (true == enable) {
 230:	88 23       	and	r24, r24
 232:	11 f0       	breq	.+4      	; 0x238 <usartSingleEnableRxInt+0x8>
		UCSRB |= _BV(RXCIE);
 234:	57 9a       	sbi	0x0a, 7	; 10
 236:	01 c0       	rjmp	.+2      	; 0x23a <usartSingleEnableRxInt+0xa>
	} else {
		UCSRB &= ~_BV(RXCIE);
 238:	57 98       	cbi	0x0a, 7	; 10
	}

	return 0;
}
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	08 95       	ret

00000240 <usartSingleEnableTxBufInt>:

int usartSingleEnableTxBufInt(_Bool enable) {
	if (true == enable) {
 240:	88 23       	and	r24, r24
 242:	11 f0       	breq	.+4      	; 0x248 <usartSingleEnableTxBufInt+0x8>
		UCSRB |= _BV(UDRIE);
 244:	55 9a       	sbi	0x0a, 5	; 10
 246:	01 c0       	rjmp	.+2      	; 0x24a <usartSingleEnableTxBufInt+0xa>
	} else {
		UCSRB &= ~_BV(UDRIE);
 248:	55 98       	cbi	0x0a, 5	; 10
	}

	return 0;
}
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	08 95       	ret

00000250 <usartSingleEnableTxCmpInt>:

int usartSingleEnableTxCmpInt(_Bool enable) {
	if (true == enable) {
 250:	88 23       	and	r24, r24
 252:	11 f0       	breq	.+4      	; 0x258 <usartSingleEnableTxCmpInt+0x8>
		UCSRB |= _BV(TXCIE);
 254:	56 9a       	sbi	0x0a, 6	; 10
 256:	01 c0       	rjmp	.+2      	; 0x25a <usartSingleEnableTxCmpInt+0xa>
	} else {
		UCSRB &= ~_BV(TXCIE);
 258:	56 98       	cbi	0x0a, 6	; 10
	}

	return 0;
}
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	08 95       	ret

00000260 <usartSinglePutcISR>:

int usartSinglePutcISR(char data) {
	UDR = data;
 260:	8c b9       	out	0x0c, r24	; 12

	return 0;
}
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	08 95       	ret

00000268 <usartSingleGetcISR>:

int usartSingleGetcISR(char *data) {
 268:	fc 01       	movw	r30, r24
	int wRetVal = 0;
	uint8_t ubStatus = 0x00;

	ubStatus = UCSRA;
 26a:	9b b1       	in	r25, 0x0b	; 11
	*data = UDR;
 26c:	8c b1       	in	r24, 0x0c	; 12
 26e:	80 83       	st	Z, r24

	if ((ubStatus & USART_RX_ERR_MASK) != 0) {
 270:	89 2f       	mov	r24, r25
 272:	8c 71       	andi	r24, 0x1C	; 28
 274:	19 f4       	brne	.+6      	; 0x27c <usartSingleGetcISR+0x14>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	17 c0       	rjmp	.+46     	; 0x2aa <usartSingleGetcISR+0x42>
		switch (ubStatus) {
 27c:	98 30       	cpi	r25, 0x08	; 8
 27e:	39 f0       	breq	.+14     	; 0x28e <usartSingleGetcISR+0x26>
 280:	90 31       	cpi	r25, 0x10	; 16
 282:	41 f0       	breq	.+16     	; 0x294 <usartSingleGetcISR+0x2c>
 284:	94 30       	cpi	r25, 0x04	; 4
 286:	49 f4       	brne	.+18     	; 0x29a <usartSingleGetcISR+0x32>
		case 0x04:
			errno = ERXPARITY;
 288:	83 e8       	ldi	r24, 0x83	; 131
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	08 c0       	rjmp	.+16     	; 0x29e <usartSingleGetcISR+0x36>
			wRetVal = -1;//USART_ERR_PARITY;
			break;
		case 0x08:
			errno = ERXOVERRUN;
 28e:	84 e8       	ldi	r24, 0x84	; 132
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	05 c0       	rjmp	.+10     	; 0x29e <usartSingleGetcISR+0x36>
			wRetVal = -1;//USART_ERR_OVERRUN;
			break;
		case 0x10:
			errno = ERXFRAM;
 294:	85 e8       	ldi	r24, 0x85	; 133
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <usartSingleGetcISR+0x36>
			wRetVal = -1;//USART_ERR_FRAME;
			break;
		default:
			errno = ERXMULTI;
 29a:	86 e8       	ldi	r24, 0x86	; 134
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	90 93 61 00 	sts	0x0061, r25
 2a2:	80 93 60 00 	sts	0x0060, r24
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	3f ef       	ldi	r19, 0xFF	; 255
		}
	} else {
	}

	return wRetVal;
}
 2aa:	c9 01       	movw	r24, r18
 2ac:	08 95       	ret

000002ae <usartBaudRateGetUBRR>:

	return true;
}

int usartBaudRateGetUBRR(uint32_t uiBaudRate, uint8_t ubTol, USART_Mode_t mode, uint16_t* puwUbrr)
{
 2ae:	3f 92       	push	r3
 2b0:	4f 92       	push	r4
 2b2:	5f 92       	push	r5
 2b4:	6f 92       	push	r6
 2b6:	7f 92       	push	r7
 2b8:	8f 92       	push	r8
 2ba:	9f 92       	push	r9
 2bc:	af 92       	push	r10
 2be:	bf 92       	push	r11
 2c0:	cf 92       	push	r12
 2c2:	df 92       	push	r13
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	df 93       	push	r29
 2ce:	cf 93       	push	r28
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	2a 97       	sbiw	r28, 0x0a	; 10
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	6b 01       	movw	r12, r22
 2e2:	7c 01       	movw	r14, r24
 2e4:	34 2e       	mov	r3, r20
 2e6:	1a 87       	std	Y+10, r17	; 0x0a
 2e8:	09 87       	std	Y+9, r16	; 0x09
	uint32_t uiClk;
	uint16_t uwBaud;
	int retVal = 0;

	if(NULL == puwUbrr)
 2ea:	01 2b       	or	r16, r17
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <usartBaudRateGetUBRR+0x42>
 2ee:	e1 c0       	rjmp	.+450    	; 0x4b2 <__stack+0x53>
	}

	//Get clock
	uiClk = xtalGetClockFreq();

	switch(mode)
 2f0:	22 23       	and	r18, r18
 2f2:	21 f0       	breq	.+8      	; 0x2fc <usartBaudRateGetUBRR+0x4e>
 2f4:	23 30       	cpi	r18, 0x03	; 3
 2f6:	08 f0       	brcs	.+2      	; 0x2fa <usartBaudRateGetUBRR+0x4c>
 2f8:	dc c0       	rjmp	.+440    	; 0x4b2 <__stack+0x53>
 2fa:	9f c0       	rjmp	.+318    	; 0x43a <usartBaudRateGetUBRR+0x18c>

static uint16_t getUBRR(uint32_t uiBaudRate, uint8_t ubTol, uint8_t factor)
{
	//Get clock
	uint32_t uiClk = xtalGetClockFreq();
	return (((uiClk) + (factor>>1) * (uiBaudRate)) / (factor * (uiBaudRate)) - 1UL);
 2fc:	dc 01       	movw	r26, r24
 2fe:	cb 01       	movw	r24, r22
 300:	03 e0       	ldi	r16, 0x03	; 3
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	aa 1f       	adc	r26, r26
 308:	bb 1f       	adc	r27, r27
 30a:	0a 95       	dec	r16
 30c:	d1 f7       	brne	.-12     	; 0x302 <usartBaudRateGetUBRR+0x54>
 30e:	8d 83       	std	Y+5, r24	; 0x05
 310:	9e 83       	std	Y+6, r25	; 0x06
 312:	af 83       	std	Y+7, r26	; 0x07
 314:	b8 87       	std	Y+8, r27	; 0x08
 316:	bc 01       	movw	r22, r24
 318:	cd 01       	movw	r24, r26
 31a:	60 50       	subi	r22, 0x00	; 0
 31c:	70 40       	sbci	r23, 0x00	; 0
 31e:	8f 41       	sbci	r24, 0x1F	; 31
 320:	9f 4f       	sbci	r25, 0xFF	; 255
 322:	a7 01       	movw	r20, r14
 324:	96 01       	movw	r18, r12
 326:	14 e0       	ldi	r17, 0x04	; 4
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	44 1f       	adc	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	1a 95       	dec	r17
 332:	d1 f7       	brne	.-12     	; 0x328 <usartBaudRateGetUBRR+0x7a>
 334:	26 d1       	rcall	.+588    	; 0x582 <__udivmodsi4>
 336:	89 01       	movw	r16, r18
 338:	01 50       	subi	r16, 0x01	; 1
 33a:	10 40       	sbci	r17, 0x00	; 0
}

static _Bool checkTol(uint32_t uiBaudRate, uint16_t uwUbrr, uint8_t ubTol, uint8_t factor)
{
	uint32_t uiClk = xtalGetClockFreq();
	if (100 * (uiClk) > (factor * ((uwUbrr) + 1)) * (100UL * (uiBaudRate) + (uiBaudRate)
 33c:	b4 e0       	ldi	r27, 0x04	; 4
 33e:	22 0f       	add	r18, r18
 340:	33 1f       	adc	r19, r19
 342:	ba 95       	dec	r27
 344:	e1 f7       	brne	.-8      	; 0x33e <usartBaudRateGetUBRR+0x90>
 346:	49 01       	movw	r8, r18
 348:	aa 24       	eor	r10, r10
 34a:	bb 24       	eor	r11, r11
 34c:	43 2c       	mov	r4, r3
 34e:	55 24       	eor	r5, r5
 350:	66 24       	eor	r6, r6
 352:	77 24       	eor	r7, r7
 354:	c3 01       	movw	r24, r6
 356:	b2 01       	movw	r22, r4
 358:	6c 59       	subi	r22, 0x9C	; 156
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	8f 4f       	sbci	r24, 0xFF	; 255
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	a7 01       	movw	r20, r14
 362:	96 01       	movw	r18, r12
 364:	ef d0       	rcall	.+478    	; 0x544 <__mulsi3>
 366:	69 83       	std	Y+1, r22	; 0x01
 368:	7a 83       	std	Y+2, r23	; 0x02
 36a:	8b 83       	std	Y+3, r24	; 0x03
 36c:	9c 83       	std	Y+4, r25	; 0x04
 36e:	c5 01       	movw	r24, r10
 370:	b4 01       	movw	r22, r8
 372:	29 81       	ldd	r18, Y+1	; 0x01
 374:	3a 81       	ldd	r19, Y+2	; 0x02
 376:	4b 81       	ldd	r20, Y+3	; 0x03
 378:	5c 81       	ldd	r21, Y+4	; 0x04
 37a:	e4 d0       	rcall	.+456    	; 0x544 <__mulsi3>
 37c:	60 50       	subi	r22, 0x00	; 0
 37e:	70 40       	sbci	r23, 0x00	; 0
 380:	84 4e       	sbci	r24, 0xE4	; 228
 382:	97 45       	sbci	r25, 0x57	; 87
 384:	a0 f0       	brcs	.+40     	; 0x3ae <usartBaudRateGetUBRR+0x100>
			* ubTol)) {
		return false;
	} else if (100 * (uiClk) < (factor * ((uwUbrr) + 1)) * (100 * (uiBaudRate)
 386:	64 e6       	ldi	r22, 0x64	; 100
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	64 19       	sub	r22, r4
 390:	75 09       	sbc	r23, r5
 392:	86 09       	sbc	r24, r6
 394:	97 09       	sbc	r25, r7
 396:	a7 01       	movw	r20, r14
 398:	96 01       	movw	r18, r12
 39a:	d4 d0       	rcall	.+424    	; 0x544 <__mulsi3>
 39c:	a5 01       	movw	r20, r10
 39e:	94 01       	movw	r18, r8
 3a0:	d1 d0       	rcall	.+418    	; 0x544 <__mulsi3>
 3a2:	61 50       	subi	r22, 0x01	; 1
 3a4:	70 40       	sbci	r23, 0x00	; 0
 3a6:	84 4e       	sbci	r24, 0xE4	; 228
 3a8:	97 45       	sbci	r25, 0x57	; 87
 3aa:	08 f4       	brcc	.+2      	; 0x3ae <usartBaudRateGetUBRR+0x100>
 3ac:	85 c0       	rjmp	.+266    	; 0x4b8 <__stack+0x59>

static uint16_t getUBRR(uint32_t uiBaudRate, uint8_t ubTol, uint8_t factor)
{
	//Get clock
	uint32_t uiClk = xtalGetClockFreq();
	return (((uiClk) + (factor>>1) * (uiBaudRate)) / (factor * (uiBaudRate)) - 1UL);
 3ae:	c7 01       	movw	r24, r14
 3b0:	b6 01       	movw	r22, r12
 3b2:	a2 e0       	ldi	r26, 0x02	; 2
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	88 1f       	adc	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	aa 95       	dec	r26
 3be:	d1 f7       	brne	.-12     	; 0x3b4 <usartBaudRateGetUBRR+0x106>
 3c0:	60 50       	subi	r22, 0x00	; 0
 3c2:	70 40       	sbci	r23, 0x00	; 0
 3c4:	8f 41       	sbci	r24, 0x1F	; 31
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	2d 81       	ldd	r18, Y+5	; 0x05
 3ca:	3e 81       	ldd	r19, Y+6	; 0x06
 3cc:	4f 81       	ldd	r20, Y+7	; 0x07
 3ce:	58 85       	ldd	r21, Y+8	; 0x08
 3d0:	d8 d0       	rcall	.+432    	; 0x582 <__udivmodsi4>
 3d2:	89 01       	movw	r16, r18
 3d4:	01 50       	subi	r16, 0x01	; 1
 3d6:	10 40       	sbci	r17, 0x00	; 0
}

static _Bool checkTol(uint32_t uiBaudRate, uint16_t uwUbrr, uint8_t ubTol, uint8_t factor)
{
	uint32_t uiClk = xtalGetClockFreq();
	if (100 * (uiClk) > (factor * ((uwUbrr) + 1)) * (100UL * (uiBaudRate) + (uiBaudRate)
 3d8:	f3 e0       	ldi	r31, 0x03	; 3
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
 3de:	fa 95       	dec	r31
 3e0:	e1 f7       	brne	.-8      	; 0x3da <usartBaudRateGetUBRR+0x12c>
 3e2:	49 01       	movw	r8, r18
 3e4:	aa 24       	eor	r10, r10
 3e6:	bb 24       	eor	r11, r11
 3e8:	c5 01       	movw	r24, r10
 3ea:	b4 01       	movw	r22, r8
 3ec:	29 81       	ldd	r18, Y+1	; 0x01
 3ee:	3a 81       	ldd	r19, Y+2	; 0x02
 3f0:	4b 81       	ldd	r20, Y+3	; 0x03
 3f2:	5c 81       	ldd	r21, Y+4	; 0x04
 3f4:	a7 d0       	rcall	.+334    	; 0x544 <__mulsi3>
 3f6:	60 50       	subi	r22, 0x00	; 0
 3f8:	70 40       	sbci	r23, 0x00	; 0
 3fa:	84 4e       	sbci	r24, 0xE4	; 228
 3fc:	97 45       	sbci	r25, 0x57	; 87
 3fe:	a0 f0       	brcs	.+40     	; 0x428 <usartBaudRateGetUBRR+0x17a>
			* ubTol)) {
		return false;
	} else if (100 * (uiClk) < (factor * ((uwUbrr) + 1)) * (100 * (uiBaudRate)
 400:	64 e6       	ldi	r22, 0x64	; 100
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	64 19       	sub	r22, r4
 40a:	75 09       	sbc	r23, r5
 40c:	86 09       	sbc	r24, r6
 40e:	97 09       	sbc	r25, r7
 410:	a7 01       	movw	r20, r14
 412:	96 01       	movw	r18, r12
 414:	97 d0       	rcall	.+302    	; 0x544 <__mulsi3>
 416:	a5 01       	movw	r20, r10
 418:	94 01       	movw	r18, r8
 41a:	94 d0       	rcall	.+296    	; 0x544 <__mulsi3>
 41c:	61 50       	subi	r22, 0x01	; 1
 41e:	70 40       	sbci	r23, 0x00	; 0
 420:	84 4e       	sbci	r24, 0xE4	; 228
 422:	97 45       	sbci	r25, 0x57	; 87
 424:	08 f4       	brcc	.+2      	; 0x428 <usartBaudRateGetUBRR+0x17a>
 426:	48 c0       	rjmp	.+144    	; 0x4b8 <__stack+0x59>
		if(false == checkTol(uiBaudRate, uwBaud, ubTol, 16))
		{
			uwBaud = getUBRR(uiBaudRate,ubTol,8);
			if(false == checkTol(uiBaudRate, uwBaud, ubTol, 8))
			{
				errno = EBAUDRATE;
 428:	80 e8       	ldi	r24, 0x80	; 128
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 61 00 	sts	0x0061, r25
 430:	80 93 60 00 	sts	0x0060, r24
 434:	2f ef       	ldi	r18, 0xFF	; 255
 436:	3f ef       	ldi	r19, 0xFF	; 255
 438:	45 c0       	rjmp	.+138    	; 0x4c4 <__stack+0x65>

static uint16_t getUBRR(uint32_t uiBaudRate, uint8_t ubTol, uint8_t factor)
{
	//Get clock
	uint32_t uiClk = xtalGetClockFreq();
	return (((uiClk) + (factor>>1) * (uiBaudRate)) / (factor * (uiBaudRate)) - 1UL);
 43a:	60 50       	subi	r22, 0x00	; 0
 43c:	70 40       	sbci	r23, 0x00	; 0
 43e:	8f 41       	sbci	r24, 0x1F	; 31
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	a7 01       	movw	r20, r14
 444:	96 01       	movw	r18, r12
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	44 1f       	adc	r20, r20
 44c:	55 1f       	adc	r21, r21
 44e:	99 d0       	rcall	.+306    	; 0x582 <__udivmodsi4>
 450:	89 01       	movw	r16, r18
 452:	01 50       	subi	r16, 0x01	; 1
 454:	10 40       	sbci	r17, 0x00	; 0
}

static _Bool checkTol(uint32_t uiBaudRate, uint16_t uwUbrr, uint8_t ubTol, uint8_t factor)
{
	uint32_t uiClk = xtalGetClockFreq();
	if (100 * (uiClk) > (factor * ((uwUbrr) + 1)) * (100UL * (uiBaudRate) + (uiBaudRate)
 456:	22 0f       	add	r18, r18
 458:	33 1f       	adc	r19, r19
 45a:	29 01       	movw	r4, r18
 45c:	66 24       	eor	r6, r6
 45e:	77 24       	eor	r7, r7
 460:	83 2c       	mov	r8, r3
 462:	99 24       	eor	r9, r9
 464:	aa 24       	eor	r10, r10
 466:	bb 24       	eor	r11, r11
 468:	c5 01       	movw	r24, r10
 46a:	b4 01       	movw	r22, r8
 46c:	6c 59       	subi	r22, 0x9C	; 156
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	8f 4f       	sbci	r24, 0xFF	; 255
 472:	9f 4f       	sbci	r25, 0xFF	; 255
 474:	a7 01       	movw	r20, r14
 476:	96 01       	movw	r18, r12
 478:	65 d0       	rcall	.+202    	; 0x544 <__mulsi3>
 47a:	a3 01       	movw	r20, r6
 47c:	92 01       	movw	r18, r4
 47e:	62 d0       	rcall	.+196    	; 0x544 <__mulsi3>
 480:	60 50       	subi	r22, 0x00	; 0
 482:	70 40       	sbci	r23, 0x00	; 0
 484:	84 4e       	sbci	r24, 0xE4	; 228
 486:	97 45       	sbci	r25, 0x57	; 87
 488:	78 f2       	brcs	.-98     	; 0x428 <usartBaudRateGetUBRR+0x17a>
			* ubTol)) {
		return false;
	} else if (100 * (uiClk) < (factor * ((uwUbrr) + 1)) * (100 * (uiBaudRate)
 48a:	64 e6       	ldi	r22, 0x64	; 100
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	68 19       	sub	r22, r8
 494:	79 09       	sbc	r23, r9
 496:	8a 09       	sbc	r24, r10
 498:	9b 09       	sbc	r25, r11
 49a:	a7 01       	movw	r20, r14
 49c:	96 01       	movw	r18, r12
 49e:	52 d0       	rcall	.+164    	; 0x544 <__mulsi3>
 4a0:	a3 01       	movw	r20, r6
 4a2:	92 01       	movw	r18, r4
 4a4:	4f d0       	rcall	.+158    	; 0x544 <__mulsi3>
 4a6:	61 50       	subi	r22, 0x01	; 1
 4a8:	70 40       	sbci	r23, 0x00	; 0
 4aa:	84 4e       	sbci	r24, 0xE4	; 228
 4ac:	97 45       	sbci	r25, 0x57	; 87
 4ae:	20 f0       	brcs	.+8      	; 0x4b8 <__stack+0x59>
 4b0:	bb cf       	rjmp	.-138    	; 0x428 <usartBaudRateGetUBRR+0x17a>
		else
		{}
	}
		break;
	default:
		errno = EINVAL;
 4b2:	86 e1       	ldi	r24, 0x16	; 22
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	ba cf       	rjmp	.-140    	; 0x42c <usartBaudRateGetUBRR+0x17e>
		return -1;
		break;
	}

	*puwUbrr = uwBaud;
 4b8:	e9 85       	ldd	r30, Y+9	; 0x09
 4ba:	fa 85       	ldd	r31, Y+10	; 0x0a
 4bc:	11 83       	std	Z+1, r17	; 0x01
 4be:	00 83       	st	Z, r16
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
	return retVal;
}
 4c4:	c9 01       	movw	r24, r18
 4c6:	2a 96       	adiw	r28, 0x0a	; 10
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	de bf       	out	0x3e, r29	; 62
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	cd bf       	out	0x3d, r28	; 61
 4d2:	cf 91       	pop	r28
 4d4:	df 91       	pop	r29
 4d6:	1f 91       	pop	r17
 4d8:	0f 91       	pop	r16
 4da:	ff 90       	pop	r15
 4dc:	ef 90       	pop	r14
 4de:	df 90       	pop	r13
 4e0:	cf 90       	pop	r12
 4e2:	bf 90       	pop	r11
 4e4:	af 90       	pop	r10
 4e6:	9f 90       	pop	r9
 4e8:	8f 90       	pop	r8
 4ea:	7f 90       	pop	r7
 4ec:	6f 90       	pop	r6
 4ee:	5f 90       	pop	r5
 4f0:	4f 90       	pop	r4
 4f2:	3f 90       	pop	r3
 4f4:	08 95       	ret

000004f6 <usartSingleSetBaudRate>:
#include <avr/io.h>

#define USART_RX_ERR_MASK	0x1C //0b0001 1100 //TODO Check these value
#define USART_RX_CHAR_IN	0x80 //0b1000 0000

int usartSingleSetBaudRate(uint32_t baudRate) {
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	df 93       	push	r29
 4fc:	cf 93       	push	r28
 4fe:	00 d0       	rcall	.+0      	; 0x500 <usartSingleSetBaudRate+0xa>
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62

	uint16_t uwBaud;
	int result = usartBaudRateGetUBRR(baudRate, 2,USART_Mode_Async, &uwBaud);
 504:	42 e0       	ldi	r20, 0x02	; 2
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	8e 01       	movw	r16, r28
 50a:	0f 5f       	subi	r16, 0xFF	; 255
 50c:	1f 4f       	sbci	r17, 0xFF	; 255
 50e:	cf de       	rcall	.-610    	; 0x2ae <usartBaudRateGetUBRR>
 510:	9c 01       	movw	r18, r24

	if(0 <= result)
 512:	97 fd       	sbrc	r25, 7
 514:	0f c0       	rjmp	.+30     	; 0x534 <usartSingleSetBaudRate+0x3e>
	{
		UBRRH = uwBaud >> 8;
 516:	99 81       	ldd	r25, Y+1	; 0x01
 518:	8a 81       	ldd	r24, Y+2	; 0x02
 51a:	80 bd       	out	0x20, r24	; 32
		UBRRL = uwBaud;
 51c:	99 b9       	out	0x09, r25	; 9

		if (1 == result) {
 51e:	21 30       	cpi	r18, 0x01	; 1
 520:	31 05       	cpc	r19, r1
 522:	19 f4       	brne	.+6      	; 0x52a <usartSingleSetBaudRate+0x34>
			UCSRC |= _BV(1<<U2X);
 524:	80 b5       	in	r24, 0x20	; 32
 526:	84 60       	ori	r24, 0x04	; 4
 528:	02 c0       	rjmp	.+4      	; 0x52e <usartSingleSetBaudRate+0x38>
			result = 0;
		} else {
			UCSRC &= ~(_BV(1<<U2X));
 52a:	80 b5       	in	r24, 0x20	; 32
 52c:	8b 7f       	andi	r24, 0xFB	; 251
 52e:	80 bd       	out	0x20, r24	; 32
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	30 e0       	ldi	r19, 0x00	; 0
	else
	{}


	return result;
}
 534:	c9 01       	movw	r24, r18
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	cf 91       	pop	r28
 53c:	df 91       	pop	r29
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	08 95       	ret

00000544 <__mulsi3>:
 544:	62 9f       	mul	r22, r18
 546:	d0 01       	movw	r26, r0
 548:	73 9f       	mul	r23, r19
 54a:	f0 01       	movw	r30, r0
 54c:	82 9f       	mul	r24, r18
 54e:	e0 0d       	add	r30, r0
 550:	f1 1d       	adc	r31, r1
 552:	64 9f       	mul	r22, r20
 554:	e0 0d       	add	r30, r0
 556:	f1 1d       	adc	r31, r1
 558:	92 9f       	mul	r25, r18
 55a:	f0 0d       	add	r31, r0
 55c:	83 9f       	mul	r24, r19
 55e:	f0 0d       	add	r31, r0
 560:	74 9f       	mul	r23, r20
 562:	f0 0d       	add	r31, r0
 564:	65 9f       	mul	r22, r21
 566:	f0 0d       	add	r31, r0
 568:	99 27       	eor	r25, r25
 56a:	72 9f       	mul	r23, r18
 56c:	b0 0d       	add	r27, r0
 56e:	e1 1d       	adc	r30, r1
 570:	f9 1f       	adc	r31, r25
 572:	63 9f       	mul	r22, r19
 574:	b0 0d       	add	r27, r0
 576:	e1 1d       	adc	r30, r1
 578:	f9 1f       	adc	r31, r25
 57a:	bd 01       	movw	r22, r26
 57c:	cf 01       	movw	r24, r30
 57e:	11 24       	eor	r1, r1
 580:	08 95       	ret

00000582 <__udivmodsi4>:
 582:	a1 e2       	ldi	r26, 0x21	; 33
 584:	1a 2e       	mov	r1, r26
 586:	aa 1b       	sub	r26, r26
 588:	bb 1b       	sub	r27, r27
 58a:	fd 01       	movw	r30, r26
 58c:	0d c0       	rjmp	.+26     	; 0x5a8 <__udivmodsi4_ep>

0000058e <__udivmodsi4_loop>:
 58e:	aa 1f       	adc	r26, r26
 590:	bb 1f       	adc	r27, r27
 592:	ee 1f       	adc	r30, r30
 594:	ff 1f       	adc	r31, r31
 596:	a2 17       	cp	r26, r18
 598:	b3 07       	cpc	r27, r19
 59a:	e4 07       	cpc	r30, r20
 59c:	f5 07       	cpc	r31, r21
 59e:	20 f0       	brcs	.+8      	; 0x5a8 <__udivmodsi4_ep>
 5a0:	a2 1b       	sub	r26, r18
 5a2:	b3 0b       	sbc	r27, r19
 5a4:	e4 0b       	sbc	r30, r20
 5a6:	f5 0b       	sbc	r31, r21

000005a8 <__udivmodsi4_ep>:
 5a8:	66 1f       	adc	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	1a 94       	dec	r1
 5b2:	69 f7       	brne	.-38     	; 0x58e <__udivmodsi4_loop>
 5b4:	60 95       	com	r22
 5b6:	70 95       	com	r23
 5b8:	80 95       	com	r24
 5ba:	90 95       	com	r25
 5bc:	9b 01       	movw	r18, r22
 5be:	ac 01       	movw	r20, r24
 5c0:	bd 01       	movw	r22, r26
 5c2:	cf 01       	movw	r24, r30
 5c4:	08 95       	ret

000005c6 <_exit>:
 5c6:	f8 94       	cli

000005c8 <__stop_program>:
 5c8:	ff cf       	rjmp	.-2      	; 0x5c8 <__stop_program>
